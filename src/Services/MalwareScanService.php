<?php

namespace LaravelGPT\DataBreach\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Storage;

class MalwareScanService
{
    /**
     * Scan a file for malware.
     */
    public function scanFile(string $filePath): array
    {
        $fileHash = hash_file('sha256', $filePath);
        $cacheKey = "malware_scan_{$fileHash}";
        
        if (Cache::has($cacheKey)) {
            return Cache::get($cacheKey);
        }

        $results = [
            'file_path' => $filePath,
            'file_hash' => $fileHash,
            'malicious' => false,
            'detection_ratio' => 0,
            'total_scanners' => 0,
            'detections' => [],
            'scan_date' => now()->toISOString(),
            'status' => 'clean',
        ];

        // Check file size
        $fileSize = filesize($filePath);
        $maxSize = Config::get('data-breach.malware_scan.max_file_size', 32 * 1024 * 1024);
        
        if ($fileSize > $maxSize) {
            $results['status'] = 'error';
            $results['error'] = 'File size exceeds maximum allowed size';
            return $results;
        }

        // Check file extension
        $extension = pathinfo($filePath, PATHINFO_EXTENSION);
        $allowedExtensions = Config::get('data-breach.malware_scan.allowed_extensions', []);
        
        if (!in_array(strtolower($extension), $allowedExtensions)) {
            $results['status'] = 'error';
            $results['error'] = 'File type not allowed for scanning';
            return $results;
        }

        // Scan with VirusTotal
        $virustotalResult = $this->scanWithVirusTotal($filePath, $fileHash);
        if ($virustotalResult['malicious']) {
            $results['malicious'] = true;
            $results['detection_ratio'] = $virustotalResult['detection_ratio'];
            $results['total_scanners'] = $virustotalResult['total_scanners'];
            $results['detections'] = $virustotalResult['detections'];
            $results['status'] = 'malicious';
        }

        // Cache the result
        $ttl = Config::get('data-breach.cache.ttl.file_scan', 7200);
        Cache::put($cacheKey, $results, $ttl);

        // Log if malicious
        if ($results['malicious'] && Config::get('data-breach.logging.log_malware_detections', true)) {
            Log::warning('Malware detected in file', [
                'file_path' => $filePath,
                'file_hash' => $fileHash,
                'detection_ratio' => $results['detection_ratio'],
                'detections' => $results['detections'],
            ]);
        }

        return $results;
    }

    /**
     * Scan a URL for malware.
     */
    public function scanUrl(string $url): array
    {
        $urlHash = hash('sha256', $url);
        $cacheKey = "url_scan_{$urlHash}";
        
        if (Cache::has($cacheKey)) {
            return Cache::get($cacheKey);
        }

        $results = [
            'url' => $url,
            'url_hash' => $urlHash,
            'malicious' => false,
            'detection_ratio' => 0,
            'total_scanners' => 0,
            'detections' => [],
            'scan_date' => now()->toISOString(),
            'status' => 'clean',
        ];

        // Scan with VirusTotal
        $virustotalResult = $this->scanUrlWithVirusTotal($url);
        if ($virustotalResult['malicious']) {
            $results['malicious'] = true;
            $results['detection_ratio'] = $virustotalResult['detection_ratio'];
            $results['total_scanners'] = $virustotalResult['total_scanners'];
            $results['detections'] = $virustotalResult['detections'];
            $results['status'] = 'malicious';
        }

        // Cache the result
        $ttl = Config::get('data-breach.cache.ttl.file_scan', 7200);
        Cache::put($cacheKey, $results, $ttl);

        return $results;
    }

    /**
     * Scan file with VirusTotal.
     */
    protected function scanWithVirusTotal(string $filePath, string $fileHash): array
    {
        $apiKey = Config::get('data-breach.apis.virustotal');
        
        if (!$apiKey) {
            return ['malicious' => false, 'detection_ratio' => 0, 'total_scanners' => 0, 'detections' => []];
        }

        try {
            // First, check if file has been scanned before
            $response = Http::withHeaders([
                'x-apikey' => $apiKey,
            ])->get("https://www.virustotal.com/api/v3/files/{$fileHash}");

            if ($response->successful()) {
                $data = $response->json()['data'];
                $attributes = $data['attributes'];
                $lastAnalysisResults = $attributes['last_analysis_results'] ?? [];
                $lastAnalysisStats = $attributes['last_analysis_stats'] ?? [];
                
                $malicious = $lastAnalysisStats['malicious'] ?? 0;
                $suspicious = $lastAnalysisStats['suspicious'] ?? 0;
                $total = array_sum($lastAnalysisStats);
                
                $detections = [];
                foreach ($lastAnalysisResults as $scanner => $result) {
                    if ($result['category'] === 'malicious' || $result['category'] === 'suspicious') {
                        $detections[] = [
                            'scanner' => $scanner,
                            'result' => $result['result'],
                            'category' => $result['category'],
                        ];
                    }
                }

                $detectionRatio = $total > 0 ? (($malicious + $suspicious) / $total) * 100 : 0;

                return [
                    'malicious' => $malicious > 0 || $suspicious > 0,
                    'detection_ratio' => $detectionRatio,
                    'total_scanners' => $total,
                    'detections' => $detections,
                ];
            } elseif ($response->status() === 404) {
                // File not found, upload it for scanning
                return $this->uploadFileToVirusTotal($filePath, $apiKey);
            }
        } catch (\Exception $e) {
            Log::error('VirusTotal file scan error', ['error' => $e->getMessage()]);
        }

        return ['malicious' => false, 'detection_ratio' => 0, 'total_scanners' => 0, 'detections' => []];
    }

    /**
     * Upload file to VirusTotal for scanning.
     */
    protected function uploadFileToVirusTotal(string $filePath, string $apiKey): array
    {
        try {
            // Get upload URL
            $response = Http::withHeaders([
                'x-apikey' => $apiKey,
            ])->get('https://www.virustotal.com/api/v3/files/upload_url');

            if ($response->successful()) {
                $uploadUrl = $response->json()['data'];
                
                // Upload file
                $uploadResponse = Http::withHeaders([
                    'x-apikey' => $apiKey,
                ])->attach('file', file_get_contents($filePath), basename($filePath))
                  ->post($uploadUrl);

                if ($uploadResponse->successful()) {
                    $analysisId = $uploadResponse->json()['data']['id'];
                    
                    // Wait for analysis to complete
                    return $this->waitForAnalysis($analysisId, $apiKey);
                }
            }
        } catch (\Exception $e) {
            Log::error('VirusTotal file upload error', ['error' => $e->getMessage()]);
        }

        return ['malicious' => false, 'detection_ratio' => 0, 'total_scanners' => 0, 'detections' => []];
    }

    /**
     * Wait for VirusTotal analysis to complete.
     */
    protected function waitForAnalysis(string $analysisId, string $apiKey): array
    {
        $maxAttempts = 10;
        $attempt = 0;

        while ($attempt < $maxAttempts) {
            try {
                $response = Http::withHeaders([
                    'x-apikey' => $apiKey,
                ])->get("https://www.virustotal.com/api/v3/analyses/{$analysisId}");

                if ($response->successful()) {
                    $data = $response->json()['data'];
                    $attributes = $data['attributes'];
                    
                    if ($attributes['status'] === 'completed') {
                        $stats = $attributes['stats'] ?? [];
                        $malicious = $stats['malicious'] ?? 0;
                        $suspicious = $stats['suspicious'] ?? 0;
                        $total = array_sum($stats);
                        
                        $detectionRatio = $total > 0 ? (($malicious + $suspicious) / $total) * 100 : 0;

                        return [
                            'malicious' => $malicious > 0 || $suspicious > 0,
                            'detection_ratio' => $detectionRatio,
                            'total_scanners' => $total,
                            'detections' => [],
                        ];
                    }
                }

                $attempt++;
                sleep(30); // Wait 30 seconds before next attempt
            } catch (\Exception $e) {
                Log::error('VirusTotal analysis wait error', ['error' => $e->getMessage()]);
                break;
            }
        }

        return ['malicious' => false, 'detection_ratio' => 0, 'total_scanners' => 0, 'detections' => []];
    }

    /**
     * Scan URL with VirusTotal.
     */
    protected function scanUrlWithVirusTotal(string $url): array
    {
        $apiKey = Config::get('data-breach.apis.virustotal');
        
        if (!$apiKey) {
            return ['malicious' => false, 'detection_ratio' => 0, 'total_scanners' => 0, 'detections' => []];
        }

        try {
            $urlId = base64_encode($url);
            
            $response = Http::withHeaders([
                'x-apikey' => $apiKey,
            ])->get("https://www.virustotal.com/api/v3/urls/{$urlId}");

            if ($response->successful()) {
                $data = $response->json()['data'];
                $attributes = $data['attributes'];
                $lastAnalysisResults = $attributes['last_analysis_results'] ?? [];
                $lastAnalysisStats = $attributes['last_analysis_stats'] ?? [];
                
                $malicious = $lastAnalysisStats['malicious'] ?? 0;
                $suspicious = $lastAnalysisStats['suspicious'] ?? 0;
                $total = array_sum($lastAnalysisStats);
                
                $detections = [];
                foreach ($lastAnalysisResults as $scanner => $result) {
                    if ($result['category'] === 'malicious' || $result['category'] === 'suspicious') {
                        $detections[] = [
                            'scanner' => $scanner,
                            'result' => $result['result'],
                            'category' => $result['category'],
                        ];
                    }
                }

                $detectionRatio = $total > 0 ? (($malicious + $suspicious) / $total) * 100 : 0;

                return [
                    'malicious' => $malicious > 0 || $suspicious > 0,
                    'detection_ratio' => $detectionRatio,
                    'total_scanners' => $total,
                    'detections' => $detections,
                ];
            }
        } catch (\Exception $e) {
            Log::error('VirusTotal URL scan error', ['error' => $e->getMessage()]);
        }

        return ['malicious' => false, 'detection_ratio' => 0, 'total_scanners' => 0, 'detections' => []];
    }
} 