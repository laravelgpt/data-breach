<?php

namespace LaravelGPT\DataBreach\Livewire;

use Livewire\Component;
use Livewire\WithFileUploads;
use LaravelGPT\DataBreach\Services\MalwareScanService;
use Illuminate\Support\Facades\RateLimiter;

class MalwareScanner extends Component
{
    use WithFileUploads;

    public $file;
    public $url = '';
    public ?array $result = null;
    public bool $isLoading = false;
    public string $error = '';
    public string $scanType = 'file'; // 'file' or 'url'

    public function scanFile()
    {
        $this->reset(['result', 'error']);
        
        if (!$this->file) {
            $this->error = 'Please select a file to scan';
            return;
        }

        // Rate limiting
        $key = 'malware-scan-' . request()->ip();
        if (RateLimiter::tooManyAttempts($key, config('data-breach.rate_limiting.file_scan', 10))) {
            $this->error = 'Too many requests. Please try again later.';
            return;
        }

        RateLimiter::hit($key);

        $this->isLoading = true;

        try {
            $malwareService = app(MalwareScanService::class);
            $this->result = $malwareService->scanFile($this->file);
        } catch (\Exception $e) {
            $this->error = 'Error scanning file: ' . $e->getMessage();
        } finally {
            $this->isLoading = false;
        }
    }

    public function scanUrl()
    {
        $this->reset(['result', 'error']);
        
        if (empty($this->url)) {
            $this->error = 'Please enter a URL to scan';
            return;
        }

        if (!filter_var($this->url, FILTER_VALIDATE_URL)) {
            $this->error = 'Please enter a valid URL';
            return;
        }

        // Rate limiting
        $key = 'malware-scan-' . request()->ip();
        if (RateLimiter::tooManyAttempts($key, config('data-breach.rate_limiting.file_scan', 10))) {
            $this->error = 'Too many requests. Please try again later.';
            return;
        }

        RateLimiter::hit($key);

        $this->isLoading = true;

        try {
            $malwareService = app(MalwareScanService::class);
            $this->result = $malwareService->scanUrl($this->url);
        } catch (\Exception $e) {
            $this->error = 'Error scanning URL: ' . $e->getMessage();
        } finally {
            $this->isLoading = false;
        }
    }

    public function render()
    {
        return view('data-breach::livewire.malware-scanner');
    }
} 