<?php

namespace LaravelGPT\DataBreach\Http\Controllers\Api;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use LaravelGPT\DataBreach\Services\MalwareScanService;
use LaravelGPT\DataBreach\Services\AlertDispatcherService;

class MalwareController
{
    public function __construct(
        private MalwareScanService $malwareService,
        private AlertDispatcherService $alertService
    ) {}

    /**
     * Scan file for malware.
     */
    public function scanFile(Request $request): JsonResponse
    {
        $request->validate([
            'file' => 'required|file|max:32768', // 32MB max
        ]);

        try {
            $file = $request->file('file');
            $filePath = $file->getPathname();
            
            $result = $this->malwareService->scanFile($filePath);

            // Send alert if malicious
            if ($result['malicious']) {
                $this->alertService->sendAlert('malware_detected', [
                    'file_path' => $file->getClientOriginalName(),
                    'detection_ratio' => $result['detection_ratio'],
                    'total_scanners' => $result['total_scanners'],
                    'detections' => $result['detections'],
                ]);
            }

            return response()->json([
                'success' => true,
                'data' => $result,
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Error scanning file: ' . $e->getMessage(),
            ], 500);
        }
    }

    /**
     * Scan URL for malware.
     */
    public function scanUrl(Request $request): JsonResponse
    {
        $request->validate([
            'url' => 'required|string|url',
        ]);

        try {
            $url = $request->input('url');
            $result = $this->malwareService->scanUrl($url);

            // Send alert if malicious
            if ($result['malicious']) {
                $this->alertService->sendAlert('malware_detected', [
                    'url' => $url,
                    'detection_ratio' => $result['detection_ratio'],
                    'total_scanners' => $result['total_scanners'],
                    'detections' => $result['detections'],
                ]);
            }

            return response()->json([
                'success' => true,
                'data' => $result,
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Error scanning URL: ' . $e->getMessage(),
            ], 500);
        }
    }
} 